- release_tracks: [ALPHA, BETA, GA]
  help_text:
    brief: |
      Create a Dataproc Metastore service.
    description: |
      Create a new Dataproc Metastore service with the given name and configurations.

      If run asynchronously with `--async`, exits after printing
      one operation name that can be used to poll the status of the
      creation via:

        {top_command} metastore operations describe
    examples: |
      To create a Dataproc Metastore service with the name `my-metastore-service` in location
      `us-central` using a non default port 9090, run:

          $ {command} my-metastore-service --location=us-central1 --port=9090

      To create a Dataproc Metastore service with the name `my-metastore-service` in location
      `us-central` using a non default network foo, run:

          $ {command} my-metastore-service --location=us-central1 --network=foo

  request:
    ALPHA:
      api_version: v1alpha
      modify_request_hooks:
      - googlecloudsdk.command_lib.metastore.services.util:GenerateNetworkConfigFromSubnetList
      - googlecloudsdk.command_lib.metastore.services.util:GenerateAuxiliaryVersionsConfigFromList
      - googlecloudsdk.command_lib.metastore.validators:ValidateServiceMutexConfig
      - googlecloudsdk.command_lib.metastore.validators:ValidateScheduledBackupConfigs
    BETA:
      api_version: v1beta
      modify_request_hooks:
      - googlecloudsdk.command_lib.metastore.services.util:GenerateNetworkConfigFromSubnetList
      - googlecloudsdk.command_lib.metastore.services.util:GenerateAuxiliaryVersionsConfigFromList
      - googlecloudsdk.command_lib.metastore.validators:ValidateServiceMutexConfig
      - googlecloudsdk.command_lib.metastore.validators:ValidateScheduledBackupConfigs
    GA:
      api_version: v1
      modify_request_hooks:
      - googlecloudsdk.command_lib.metastore.services.util:GenerateNetworkConfigFromSubnetList
      - googlecloudsdk.command_lib.metastore.services.util:GenerateAuxiliaryVersionsConfigFromList
      - googlecloudsdk.command_lib.metastore.validators:ValidateServiceMutexConfigForV1
    collection: metastore.projects.locations.services

  arguments:
    resource:
      help_text: |
        Arguments and flags that specify the Dataproc Metastore service
        you want to create.
      spec: !REF googlecloudsdk.command_lib.metastore.resources:service
    params:
    - arg_name: port
      api_field: service.port
      default: 9083
      processor: googlecloudsdk.command_lib.metastore.validators:ValidatePort
      help_text: |
        The TCP port on which the Metastore service will listen.
        If unspecified, the default port 9083 will be used.
    - group:
        help_text: |
          The instance size of the Dataproc Metastore instance.
        mutex: true
        params:
        - arg_name: tier
          api_field: service.tier
          help_text: |
            The tier of the service.
          choices:
          - arg_value: enterprise
            enum_value: ENTERPRISE
            help_text:  |
              The enterprise tier provides multi-zone high availability, and sufficient
              scalability for enterprise-level Dataproc Metastore workloads.
          - arg_value: developer
            enum_value: DEVELOPER
            help_text:  |
              The developer tier provides limited scalability and no fault tolerance.
              Good for low-cost proof-of-concept.
          fallback: googlecloudsdk.core.properties:VALUES.metastore.tier.Get
        - arg_name: scaling-factor
          api_field: service.scalingConfig.scalingFactor
          help_text: |
            The scaling factor of the service. This should be a float in the range [0.1,6.0].
            If the value is less than 1.0, then it should be a multiple of 0.1.
            If the value is greater than 1.0, then it should be a whole number.
            Float values should be formatted as `x.y`.
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateScalingFactor
        - arg_name: instance-size
          api_field: service.scalingConfig.instanceSize
          help_text: |
            The instance size of the service.
          choices:
          - arg_value: extra-small
            enum_value: EXTRA_SMALL
            help_text:  |
              Extra small instance size, maps to a scaling factor of 0.1.
          - arg_value: small
            enum_value: SMALL
            help_text:  |
              Small instance size, maps to a scaling factor of 0.5.
          - arg_value: medium
            enum_value: MEDIUM
            help_text:  |
              Medium instance size, maps to a scaling factor of 1.0.
          - arg_value: large
            enum_value: LARGE
            help_text:  |
              Large instance size, maps to a scaling factor of 3.0.
          - arg_value: extra-large
            enum_value: EXTRA_LARGE
            help_text:  |
              Extra large instance size, maps to a scaling factor of 6.0.
    - arg_name: hive-metastore-version
      api_field: service.hiveMetastoreConfig.version
      help_text: |
        The Hive metastore schema version. The supported versions of a location are listed via:

          {top_command} metastore locations describe

        If unspecified, the default version chosen by the server will be used.
    - arg_name: data-catalog-sync
      default: false
      api_field: service.metadataIntegration.dataCatalogConfig.enabled
      help_text: |
        A boolean flag to determine whether Dataproc Metastore metadata sync
        to Data Catalog should be enabled, false if unspecified.
        Mutually exclusive with flag `--encryption-kms-key`.
    - arg_name: release-channel
      help_text: |
        The release channel of the service.
      choices:
      - arg_value: stable
        enum_value: STABLE
        help_text:  |
          The `STABLE` release channel contains features that are considered stable
          and have been validated for production use.
      - arg_value: canary
        enum_value: CANARY
        help_text:  |
          The `CANARY` release channel contains the newest features, which may be
          unstable and subject to unresolved issues with no known workarounds.
          Services using the `CANARY` release channel are not subject to any SLAs.
      default: stable
      api_field: service.releaseChannel
    - arg_name: database-type
      help_text: |
        The type of database the Dataproc Metastore service will store data in.
      choices:
      - arg_value: mysql
        enum_value: MYSQL
        help_text:  |
          `MYSQL` database type is a Dataproc Metastore service backed by MySQL CloudSQL.
      - arg_value: spanner
        enum_value: SPANNER
        help_text:  |
          `SPANNER` database type is a Dataproc Metastore service backed by Cloud Spanner.
      default: mysql
      api_field: service.databaseType
    - group:
        help_text: |
          Configuration properties specific to running Hive metastore
          software as the metastore service.
        mutex: true
        params:
        - arg_name: hive-metastore-configs
          api_field: service.hiveMetastoreConfig.configOverrides.additionalProperties
          metavar: KEY=VALUE
          help_text: |
            A mapping of Hive metastore configuration key-value pairs to
            apply to the Hive metastore.
          type:
            arg_dict:
              flatten: true
              spec:
              - api_field: key
              - api_field: value
        - arg_name: hive-metastore-configs-from-file
          api_field: service.hiveMetastoreConfig.configOverrides
          type: "googlecloudsdk.calliope.arg_parsers:FileContents:"
          processor: googlecloudsdk.command_lib.metastore.services.util:LoadHiveMetatsoreConfigsFromXmlFile
          help_text: |
            Path to a XML file containing a mapping of Hive metastore configuration key-value
            pairs to apply to the Hive metastore.

            For example:

              hive-site.xml
                  <configuration>
                    <property>
                      <name>hive.metastore.warehouse.dir</name>
                      <value>${test.warehouse.dir}</value>
                      <description></description>
                    </property>
                  </configuration>
    - group:
        help_text: |
          Information used to configure the Hive metastore service as a service principal
          in a Kerberos realm.
        params:
        - arg_name: kerberos-principal
          api_field: service.hiveMetastoreConfig.kerberosConfig.principal
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateKerberosPrincipal
          help_text: |
            A Kerberos principal that exists in the KDC to authenticate as. A typical principal
            is of the form "primary/instance@REALM", but there is no exact format.
          required: true
        - arg_name: krb5-config
          api_field: service.hiveMetastoreConfig.kerberosConfig.krb5ConfigGcsUri
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateGcsUri:arg_name=--krb5-config
          help_text: |
            A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form
            gs://{bucket_name}/path/krb5.conf, although the file does not need to be named
            krb5.conf explicitly.
          required: true
        - arg_name: keytab
          api_field: service.hiveMetastoreConfig.kerberosConfig.keytab.cloudSecret
          processor: googlecloudsdk.command_lib.metastore.parsers:ParseSecretManagerSecretVersion
          help_text: |
            A Kerberos keytab file that can be used to authenticate a service principal
            with a Kerberos Key Distribution Center. This is a Secret Manager secret version,
            and can be fully-qualified URL, or relative name in the form
            `projects/{project_id}/secrets/{secret_id}/versions/{version_id}`.
          required: true
    - group:
        help_text: |
          The one hour maintenance window that specifies when Dataproc
          Metastore may perform system maintenance operation to the service, in
          UTC time.
        params:
        - arg_name: maintenance-window-day
          api_field: service.maintenanceWindow.dayOfWeek
          required: true
          choices:
          - arg_value: mon
            enum_value: MONDAY
          - arg_value: tue
            enum_value: TUESDAY
          - arg_value: wed
            enum_value: WEDNESDAY
          - arg_value: thu
            enum_value: THURSDAY
          - arg_value: fri
            enum_value: FRIDAY
          - arg_value: sat
            enum_value: SATURDAY
          - arg_value: sun
            enum_value: SUNDAY
          help_text: |
            The day of week when the window starts, e.g., `sun`.
        - arg_name: maintenance-window-hour
          api_field: service.maintenanceWindow.hourOfDay
          required: true
          processor: googlecloudsdk.command_lib.metastore.validators:ValidateHourOfDay
          help_text: |
            The hour of day (0-23) when the window starts.
    - arg_name: encryption-kms-key
      api_field: service.encryptionConfig.kmsKey
      processor: googlecloudsdk.command_lib.metastore.parsers:ParseCloudKmsKey
      help_text: |
        The name of the Cloud KMS key to use for customer data encryption.
        Cannot be changed once the service is created.
        Mutually exclusive with flag `--data-catalog-sync`.
        This can be provided as a fully-qualified URL, or a relative name in
        the form `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}`.
    - group:
        help_text: |
          Network configuration for the metastore service.
        mutex: true
        params:
        - arg_name: network
          api_field: service.network
          processor: googlecloudsdk.command_lib.metastore.parsers:ParseNetwork
          help_text: |
            The name of the network on which the service can be accessed.
            This can be the network's ID, fully-qualified URL, or relative name in
            the form `projects/{project_id}/global/networks/{network}`.
            If "network", "consumer-subnetworks" and "network-config" are unspecified,
            the "default" network will be used.
        - arg_name: consumer-subnetworks
          help_text: |
            The list of subnetworks from which the service can be accessed.
            This can be the subnetwork's ID, fully-qualified URL, or relative name in
            the form `projects/{project_id}/regions/{region_id}/subnetworks/{subnetwork}`.
          type: "arg_list"
        - arg_name: network-config-from-file
          api_field: service.networkConfig
          type: "googlecloudsdk.calliope.arg_parsers:YAMLFileContents:"
          help_text: |
            Path to a YAML file containing the network configuration for Dataproc Metastore instance.
            The contents of the file should be structured as follows:

            YAML:
            consumers:
            - subnetwork: projects/{project_id}/regions/{region_id}/subnetworks/{subnetwork_id}
            - subnetwork: projects/{project_id}/regions/{region_id}/subnetworks/{subnetwork_id}
            ...
    - group:
        help_text: |
          Auxiliary versions configuration for the Dataproc Metastore service. When specified,
          a secondary Hive metastore service is created along with the primary service.
        mutex: true
        params:
        - arg_name: auxiliary-versions
          type: "arg_list"
          help_text: |
            Comma-separated list of auxiliary Hive metastore versions to deploy. Auxiliary Hive
            metastore versions must be less than the primary Hive metastore service's version.
        - arg_name: auxiliary-versions-from-file
          api_field: service.hiveMetastoreConfig.auxiliaryVersions
          type: "googlecloudsdk.calliope.arg_parsers:YAMLFileContents:"
          processor: googlecloudsdk.command_lib.metastore.services.util:LoadAuxiliaryVersionsConfigsFromYamlFile
          help_text: |
            Path to a YAML file containing the auxiliary versions configuration for
            Dataproc Metastore instance. The file should contain a unique auxiliary service name and
            auxiliary version that is lower than the primary service version. The primary version's
            Hive metastore configs are applied to the auxiliary version. Additional Hive metastore
            configs can be specified for the auxiliary version using "config_overrides". If a
            specified config property has already been overridden in the primary Hive metastore
            version's configs, the auxiliary version's override takes precedence.
            The contents of the file should be structured as follows:

            YAML:

            ```
              - name: aux-service1
                version: x.y.z
                config_overrides:
                  key1: value1
                  key2: value2
                ...
              - name: aux-service2
                version: x.y.z
                config_overrides:
                  key1: value1
                  key2: value2
                ...
              ...
            ```
    - arg_name: endpoint-protocol
      help_text: |
        The protocol to use for the metastore service endpoint.
        If unspecified, defaults to `THRIFT`.
      choices:
      - arg_value: thrift
        enum_value: THRIFT
        help_text:  |
          The legacy Apache `THRIFT` protocol.
      - arg_value: grpc
        enum_value: GRPC
        help_text:  |
          The modernized `GRPC` protocol.
      default: thrift
      api_field: service.hiveMetastoreConfig.endpointProtocol
    - group:
        mutex: true
        help_text: |
          Scheduled backup configurations to enable a scheduled backup of the metastore service.
        params:
        - arg_name: scheduled-backup-configs-from-file
          api_field: service.scheduledBackup
          type: "googlecloudsdk.calliope.arg_parsers:FileContents:"
          processor: googlecloudsdk.command_lib.metastore.services.util:LoadScheduledBackupConfigsFromJsonFile
          help_text: |
            Path to a JSON file containing a mapping of scheduled backup configurations key-value pairs to apply to the scheduled backup.

            For example:

              backup_configs.json
                  {
                    "enabled": true,
                    "cron_schedule": "0 * * * *",
                    "backup_location": "gs://example-bucket",
                    "time_zone": "UTC"
                  }
        - group:
            help_text: |
              Scheduled backup configurations to enable a scheduled backup of the metastore service.
            params:
            - arg_name: enable-scheduled-backup
              api_field: service.scheduledBackup.enabled
              action: store_true
              help_text: |
                Enable or disable scheduled backups for the Metastore service.
            - arg_name: scheduled-backup-cron
              api_field: service.scheduledBackup.cronSchedule
              help_text: |
                Specify the frequency of a scheduled backup of the metastore service.
            - arg_name: scheduled-backup-location
              api_field: service.scheduledBackup.backupLocation
              help_text: |
                Set the Cloud Storage URI to store the scheduled backups of the metastore service.
    labels:
      api_field: service.labels
  async:
    collection: metastore.projects.locations.operations
