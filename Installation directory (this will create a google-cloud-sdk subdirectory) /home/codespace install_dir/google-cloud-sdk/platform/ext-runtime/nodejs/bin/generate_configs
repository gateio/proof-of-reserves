#!/usr/bin/python
# Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import StringIO
import pipes
import sys

# Augment the path with our library directory.
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))
sys.path.append(os.path.join(ROOT_DIR, 'lib'))

import comm

ROOT = comm.RuntimeDefinitionRoot(ROOT_DIR)

# The template for the docker command that is injected into the Dockerfile
# when the user specifies a node version in their "engines" section.
INSTALL_NODE_TEMPLATE = ROOT.read_file('data/install-node-version')

def main(args):
    """Generate all config files for the module."""

    # Get runtime parameters from the controller.
    info = comm.get_config()
    runtime_data = info.runtime_data
    params = info.params

    # Generate app.yaml.
    if not params.appinfo:
        app_yaml = 'app.yaml'
        runtime = 'custom' if params.custom else 'nodejs'
        app_yaml_contents = ROOT.read_file('data/app.yaml')
        comm.gen_file(app_yaml,
                      app_yaml_contents.format(runtime=runtime))

    if params.custom or params.deploy:
        dockerfile = 'Dockerfile'

        # Customize the dockerfile.
        out = StringIO.StringIO()
        out.write(ROOT.read_file('data', 'Dockerfile'))
        if runtime_data.node_version:
            # Let node check to see if it satisfies the version constraint and
            # try to install the correct version if not.
            out.write(INSTALL_NODE_TEMPLATE %
                      {'version_spec': pipes.quote(runtime_data.node_version)})

        # If the directory structure indicates that yarn is being used
        # then install yarn since (unlike npm) Node.js doesn't include it
        if runtime_data.use_yarn:
            out.write(ROOT.read_file('data', 'install-yarn'))

        out.write('COPY . /app/\n')

        # Generate npm or yarn install if there is a package.json.
        if runtime_data.got_package_json:
            out.write(
                ROOT.read_file('data/{0}-package-json-install'.
                               format('yarn' if runtime_data.use_yarn
                                      else 'npm')))

        # Generate the appropriate start command.
        if runtime_data.got_scripts_start:
            out.write(
                'CMD {0} start\n'.format('yarn' if runtime_data.use_yarn
                                         else 'npm'))
        else:
            out.write('CMD node server.js\n')

        comm.gen_file('Dockerfile', out.getvalue())

        # Generate .dockerignore
        dockerignore = '.dockerignore'
        comm.gen_file(dockerignore, ROOT.read_file('data/dockerignore'))

if __name__ == '__main__':
    main(sys.argv)
